#####################################################################
#   A better start_print macro
#####################################################################

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer, such as bed temp, extruder temp, chamber temp, and the size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
  STATUS_HOMING                                                    # Sets SB-LEDs to homing-mode

  {% if not 'xyz' in printer.toolhead.homed_axes %}
      # If not fully homed, check if X and Y are homed
      {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
          # If X or Y not homed, do full homing
          G28
      {% else %}
          # If only X and Y are homed, check if Z is homed
          {% if not 'z' in printer.toolhead.homed_axes %}
              # If Z is not homed, home Z
              G28 Z
          {% endif %}
      {% endif %}
  {% endif %}
                
  G90                                                             # Use absolute/relative coordinates
  M400                                                            # Wait for current moves to finish
  CLEAR_PAUSE                                                     # Clear any existing pause state

  # Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR                                                  # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90C - if so, then trigger a heat soak.
  {% if params.BED|int > 90 %}
    M117 Bed: {target_bed}C                                      # Display bed temperature
    STATUS_HEATING                                              # Sets SB-LEDs to heating-mode
    M106 S255                                                    # Turns on the PT-fan
    # Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                                # Turns on the Nevermore
    G1 X{x_wait} Y{y_wait} Z15 F9000                            # Go to the center of the bed
    M190 S{target_bed}                                          # Sets the target temp for the bed
    M117 Heatsoak: {target_chamber}C                            # Display heatsoak info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for the chamber to reach the desired temp

  # If the bed temp is not over 90c, then handle soak based on material
  {% else %}
    M117 Bed: {target_bed}C                                     # Display bed temperature
    STATUS_HEATING                                              # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                            # Go to center of the bed
    M190 S{target_bed}                                          # Sets the target temp for the bed
    
    # Material-based soak times with variant handling
    {% set raw_material = params.MATERIAL|default("PLA")|string|upper %}
    
    # Extract base material type by handling variants
    {% set material = namespace(type="") %}
    {% if "PLA" in raw_material %}
        {% set material.type = "PLA" %}
    {% elif "PETG" in raw_material %}
        {% set material.type = "PETG" %}
    {% elif "TPU" in raw_material or "TPE" in raw_material %}
        {% set material.type = "TPU" %}
    {% elif "PVA" in raw_material %}
        {% set material.type = "PVA" %}
    {% elif "HIPS" in raw_material %}
        {% set material.type = "HIPS" %}
    {% else %}
        {% set material.type = raw_material %}
    {% endif %}

    # Define soak times
    {% set soak_time = {
        "PLA": 180000,    # 3 minutes - Standard PLA soak time
        "PETG": 240000,   # 4 minutes - PETG needs slightly longer to stabilize
        "TPU": 180000,    # 3 minutes - TPU/TPE materials
        "PVA": 180000,    # 3 minutes - Support material, similar to PLA
        "HIPS": 240000    # 4 minutes - When used as support/primary under 90C
    }[material.type]|default(300000) %}    # Default to 5 minutes if material not found
    
    M117 Soak: {soak_time/60000|int}min ({raw_material})        # Display soak time and material
    G4 P{soak_time}                                             # Execute soak timer
  {% endif %}

  #   # Comment out for Trident (Z_TILT_ADJUST)
  # {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
  #   STATUS_LEVELING                                            # Sets SB-LEDs to leveling-mode
  #   M117 Z-tilt adjust                                         # Display Z-tilt adjustment
  #   Z_TILT_ADJUST                                              # Levels the buildplate via z_tilt_adjust
  #   G28 Z                                                      # Homes Z again after z_tilt_adjust
  # {% endif %}

  # Uncomment for V2 (Quad gantry level AKA QGL)
  {% if printer.quad_gantry_level.applied == False %}
    STATUS_LEVELING                                             # Sets SB-LEDs to leveling-mode
    M117 QGL                                                    # Display QGL status
    QUAD_GANTRY_LEVEL                                           # Levels the gantry
    STATUS_HOMING                                               # Sets SB-LEDs to homing-mode
    G28 Z                                                       # Homes Z again after QGL
  {% endif %}

  # Heating the nozzle to 150C. This helps with getting a correct Z-home
  STATUS_HEATING                                                # Sets SB-LEDs to heating-mode
  M117 Hotend: 150C                                             # Display hotend temperature
  M109 S150                                                     # Heats the nozzle to 150C

  STATUS_CLEANING                                               # Sets SB-LEDs to cleaning-mode
  CLEAN_NOZZLE EXTRUDER={target_extruder}                      # Clean nozzle before printing

  STATUS_COOLING                                                # Sets SB-LEDs to cooling-mode
  M109 S150                                                     # Heats the nozzle to 150C

  M117 Tappy Tap                                               # Display tappy tap message
  PROBE_EDDY_NG_TAP                                             # See: https://hackmd.io/yEF4CEntSHiFTj230CdD0Q

  SMART_PARK                                                    # Parks the toolhead neat the beginning of the print

  # Uncomment for bed mesh (2 of 2)
  STATUS_MESHING                                               # Sets SB-LEDs to bed mesh-mode
  M117 Bed mesh                                                # Display bed mesh status
  BED_MESH_CALIBRATE ADAPTIVE=1                                # Starts bed mesh

  M400                                                         # Wait for current moves to finish

  SMART_PARK                                                   # KAMP smart park

  # Heats up the nozzle to target via data from the slicer
  M117 Hotend: {target_extruder}C                             # Display target hotend temperature
  STATUS_HEATING                                              # Sets SB-LEDs to heating-mode
  M107                                                        # Turns off part cooling fan
  M109 S{target_extruder}                                     # Heats the nozzle to printing temp
  
  # Gets ready to print by doing a purge line and updating the SB-LEDs
  M117 The purge...                                           # Display purge status
  STATUS_CLEANING                                             # Sets SB-LEDs to cleaning-mode
  LINE_PURGE                                                  # KAMP line purge

  M117 Printer goes brrr                                      # Display print starting
  
  STATUS_PRINTING                                             # Sets SB-LEDs to printing-mode

#####################################################################
#   A better end_print macro
#####################################################################

[gcode_macro END_PRINT]
gcode:
  #Get Boundaries
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set min_x = printer.configfile.config["stepper_x"]["position_endstop"]|float %}

  #Check end position to determine safe directions to move
  {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
    {% else %}
      {% set x_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
    {% else %}
      {% set y_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
  {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

  #Commence END_PRINT
#  STATUS_COOLING
  M400                                                           # wait for buffer to clear
  G92 E0                                                         # zero the extruder
  G1 E-4.0 F3600                                                 # retract
  G91                                                            # relative positioning
  G0 Z{z_safe} F3600                                             # move nozzle up
  M104 S0                                                        # turn off hotend
  M140 S0                                                        # turn off bed
  M106 S0                                                        # turn off fan
  M107                                                           # turn off part cooling fan
  G90                                                            # absolute positioning
  G1 X{min_x} Y{max_y} F2000                                     # move nozzle and present

  # Safe Z-drop if near maximum height (after parking)
  {% if printer.toolhead.position.z > (max_z - 20) %}
    G91                                                          # relative positioning
    G1 Z-10 F600                                                # drop 10mm if near the top
    G90                                                          # back to absolute
  {% endif %}

#  SET_DISPLAY_TEXT MSG="Scrubbing air..."                       # Displays info
#  SET_PIN PIN=nevermore VALUE=0                                 # Turns off the nevermore
  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=300
  M117 Print finished!!                                         # Displays info on LCD
  STATUS_PART_READY
  UPDATE_DELAYED_GCODE ID=set_ready_status DURATION=60
  UPDATE_DELAYED_GCODE ID=reset_printer_status DURATION=65
#  M84                                                           # Disable motors  ##CURRENTLY DISABLED THIS TO ALLOW THE IDLE TIMEOUT TIMER DISABLE THE MOTORS - PLEASE MAKE SURE YOUR HAVE AN IDLE TIMEOUT TIMER SET - FLUIDD OR MAINSAIL HAVE THESE BY DEFAULT

[delayed_gcode set_ready_status]
gcode:
  STATUS_READY                                       # # Sets SB-LEDs to ready-mode

[delayed_gcode turn_off_nevermore]
gcode:
  SET_PIN PIN=nevermore VALUE=0                      # Turns off the nevermore

[gcode_macro G29]
description: Performs Quad Gantry Leveling (if needed) and Bed Mesh Calibration
gcode:
    # Save current state
    SAVE_GCODE_STATE NAME=STATE_G29
    
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # First handle QGL if needed
    {% if not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL           # This calls our combined QGL macro which handles all homing checks
    {% endif %}
    
    # Now perform bed mesh calibration
    STATUS_MESHING                  # If you have this status LED option
    BED_MESH_CALIBRATE ADAPTIVE=1 Method=rapid_scan
    
    # Final Z home
    STATUS_HOMING
    G28 Z
    
    # Restore state and indicate ready
    RESTORE_GCODE_STATE NAME=STATE_G29
    STATUS_READY

[gcode_macro M600]
gcode:
    PAUSE                        # Make sure you have FLUIDD or Mainsail Client Variables setup for your pausing[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro mainled]
variable_state: 1  # Set initial state to 1 since light starts on
description: Toggles main LED on/off
gcode:
    {% if printer["gcode_macro mainled"].state %}
        SET_PIN PIN=main_led VALUE=0
        SET_GCODE_VARIABLE MACRO=mainled VARIABLE=state VALUE=0
    {% else %}
        SET_PIN PIN=main_led VALUE=1
        SET_GCODE_VARIABLE MACRO=mainled VARIABLE=state VALUE=1
    {% endif %}

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[gcode_macro G34]
description: G34 - Quad Gantry Level with conditional homing. Homes if needed, performs QGL, then homes Z again.
gcode:
    # Check if printer is homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        # If not fully homed, check if X and Y are homed
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            # If X or Y not homed, do full homing
            G28
        {% else %}
            # If only X and Y are homed, just home Z
            G28 Z
        {% endif %}
    {% endif %}
    
    # Perform quad gantry leveling
    QUAD_GANTRY_LEVEL
    
    # Home Z again after QGL
    G28 Z

[gcode_macro CENTER]
description: Move the toolhead to the center of objects to be printed, or center of build plate
gcode:
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set x_max = all_points | map(attribute=0) | max | default(center_x) %}
    {% set y_max = all_points | map(attribute=1) | max | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 30 | float %}

    {% set center_x = (x_min + x_max) / 2.0 | round(1) %}
    {% set center_y = (y_min + y_max) / 2.0 | round(1) %}

    SAVE_GCODE_STATE NAME=Pre_Center_State
    G90
    G0 X{center_x} Y{center_y} F{travel_speed}
    M400
    RESTORE_GCODE_STATE NAME=Pre_Center_State

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning temperature - use EXTRUDER param if available, otherwise default to 200
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(200))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Home axes if necessary
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        # If not fully homed, check if X and Y are homed
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            # If X or Y not homed, do full homing
            G28
        {% else %}
            # If only X and Y are homed, check if Z is homed
            {% if not 'z' in printer.toolhead.homed_axes %}
                # If Z is not homed, home Z
                G28 Z
            {% endif %}
        {% endif %}
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            STATUS_HOMING
            G28 Z
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
        {% endif %}
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X324 Y357 Z10 F7800                    # Move to cleaning position with safe Z height
    
    STATUS_HEATING
    M117 Heating nozzle...
    {action_respond_info("Heating nozzle to %s°C" % (NOZZLE_TEMP))}
    M109 S{NOZZLE_TEMP}                       # Heat and wait
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                 # Fan at 50%
    
    STATUS_CLEANING
    M117 Cleaning nozzle
    
    # Combined cleaning pattern
    G1 X324 Y357 F7800                        # Move to start position
    G1 Z0.2 F300                              # Lower to cleaning height (0.2mm)
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}            # Configurable wipe cycles
        # Straight wipes (now moving along X-axis)
        G1 X352 Y357 F7800                    # Forward wipe (right)
        G1 X324 Y357 F7800                    # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800                    # Diagonal forward
        G1 Y360 X336 F7800                    # Middle point (changed from Y359.5)
        G1 Y357 X352 F7800                    # Diagonal back
        
        # Constant pressure cleaning
        G1 Y362 X324 F7800                    # Forward wipe
        G1 Y357 X332 F7800                    # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X324 F7800                        # Move away from cleaning area
    M400                                      # Wait for moves to complete
    M117 Clean Complete
    M107                                      # Turn off fan
    
    # Return to safe position
    G91                                       # Relative positioning
    G1 Z10 F300                              # Raise nozzle
    G90                                       # Absolute positioning
    G28 Z                                     # Home Z
    
    STATUS_READY
    # Only turn off heaters if we're not in a print
    {% if printer.idle_timeout.state == "Idle" %}
        TURN_OFF_HEATERS
        {action_respond_info("Cleaning complete - heaters turned off (idle state)")}
    {% else %}
        {action_respond_info("Cleaning complete - heaters maintained (printing state)")}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

    #M84                                      # Disable steppers # Using IDLE timeout timer in FLuidd/mainsail

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro UNSAFE_Z_MOVEMENT]
description: Move the toolhead in Z without homing. REQUIRES force_move CONFIG! Use positive or negative values.
gcode:
    {% set z_movement = params.Z|default(5)|float %}    # Default 5mm if not specified
    
    {% if not 'force_move' in printer %}
        { action_raise_error("This macro requires [force_move] to be enabled in printer.cfg") }
    {% else %}
        # Extra warning for downward movement
        {% if z_movement < 0 %}
            { action_respond_info("!!! WARNING: PERFORMING UNSAFE DOWNWARD MOVEMENT !!!") }
            { action_respond_info("!!! ENSURE ADEQUATE CLEARANCE BELOW NOZZLE !!!") }
        {% endif %}
        
        # General warning message
        { action_respond_info("WARNING: Performing unsafe tool movement without homing!") }
        { action_respond_info("Moving Z by %smm (%s)" % (z_movement, "DOWN" if z_movement < 0 else "UP")) }
        
        # Save current state
        SAVE_GCODE_STATE NAME=UNSAFE_MOVE
        
        # Perform unsafe move
        G90                                    # Absolute positioning
        SET_KINEMATIC_POSITION Z=0            # Force Z position to 0
        G0 Z{z_movement} F300                 # Move Z at slower 5mm/s for safety
        #M84                                   # Disable steppers - Commented out to allow multiple movements
        
        # Restore saved state
        RESTORE_GCODE_STATE NAME=UNSAFE_MOVE
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
description: Calibrates Z-offset with QGL (if needed), heated nozzle and bed
rename_existing: PROBE_CALIBRATE_BASE
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|int %}
    
    SAVE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # Inform user calibration starting
    {action_respond_info("Starting preparation for Z-offset calibration")}
    {action_respond_info("Heating hotend to 150C and bed to %d" % (BED_TEMP))}
    
    # Start heating process
    M104 S150                          # Set hotend to 150C
    M140 S{BED_TEMP}                   # Set bed temperature
    
    # Check if QGL needs to be performed
    {% if not printer.quad_gantry_level.applied %}
        STATUS_LEVELING
        QUAD_GANTRY_LEVEL              # Your macro handles the two-pass system
        
        # Home Z after leveling
        STATUS_HOMING
        G28 Z
    {% endif %}
    
    # Wait for temperatures after QGL
    M190 S{BED_TEMP}                   # Wait for bed temp
    M109 S150                          # Wait for hotend temp
    
    # Begin calibration
    PROBE_CALIBRATE_BASE               # Start calibration
    TESTZ Z=-4                         # Move to initial Z position
    
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    STATUS_READY

[gcode_macro SHAPER_CALIBRATE]
rename_existing: BASE_SHAPER_CALIBRATE
description: Input Shaper auto-calibration with auto-centering
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}

    # Get bed dimensions and probe offsets
    {% set x_size = printer.configfile.config.stepper_x.position_max|float %}
    {% set y_size = printer.configfile.config.stepper_y.position_max|float %}
    
    {% if 'bltouch' in printer.configfile.config %}
        {% set probe_x_offset = printer.configfile.config.bltouch.x_offset|float %}
        {% set probe_y_offset = printer.configfile.config.bltouch.y_offset|float %}
    {% elif 'probe' in printer.configfile.config %}
        {% set probe_x_offset = printer.configfile.config.probe.x_offset|float %}
        {% set probe_y_offset = printer.configfile.config.probe.y_offset|float %}
    {% elif 'probe_eddy_ng' in printer.configfile.config %}
        {% set probe_x_offset = printer.configfile.config['probe_eddy_ng btt_eddy'].x_offset|float %}
        {% set probe_y_offset = printer.configfile.config['probe_eddy_ng btt_eddy'].y_offset|float %}
    {% else %}
        # Use toolhead max/min locations if no valid probe configuration is found
        {% set probe_x_offset = 0 %}
        {% set probe_y_offset = 0 %}
    {% endif %}

    # Calculate center point, accounting for probe offset
    {% set center_x = (x_size / 2) - probe_x_offset %}
    {% set center_y = (y_size / 2) - probe_y_offset %}

    # Move to center of bed and safe Z height in one command
    G90
    G1 X{center_x} Y{center_y} Z30 F3000

    # Perform shaper calibration for each axis
    BASE_SHAPER_CALIBRATE AXIS=x
    BASE_SHAPER_CALIBRATE AXIS=y

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Enhanced Quad Gantry Leveling with manual trigger option and state management
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        #STATUS_HOMING
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        #STATUS_HOMING
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # Only proceed with QGL if it hasn't been applied
    {% if not printer.quad_gantry_level.applied %}
        #STATUS_LEVELING
        
        # First pass - Coarse adjustment
        # Note: Replace 5 with preferred height (BTT Eddy=5, Mellow Fly/Cartographer=10)
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1
        
        # Second pass - Fine adjustment
        _QUAD_GANTRY_LEVEL horizontal_move_z=2
        
        # Home Z after leveling
        #STATUS_HOMING
        G28 Z
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=STATE_QGL