[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 75.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 600     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "STATUS_BUSY" #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "STATUS_PRINTING" #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "STATUS_BUSY" #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro G29]
description: Performs Quad Gantry Leveling (if needed) and Bed Mesh Calibration
gcode:
    # Save current state
    SAVE_GCODE_STATE NAME=STATE_G29
    
    # First handle QGL if needed
    {% if not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL           # This calls our combined QGL macro which handles all homing checks
    {% endif %}
    
    # Now perform bed mesh calibration
    STATUS_MESHING                  # If you have this status LED option
    BED_MESH_CALIBRATE ADAPTIVE=1 Method=rapid_scan
    
    # Final Z home
    STATUS_HOMING
    G28 Z
    
    # Restore state and indicate ready
    RESTORE_GCODE_STATE NAME=STATE_G29
    STATUS_READY

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Enhanced Quad Gantry Leveling with manual trigger option and state management
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # Only proceed with QGL if it hasn't been applied
    {% if not printer.quad_gantry_level.applied %}
        STATUS_LEVELING
        
        # First pass - Coarse adjustment
        # Note: Replace 5 with preferred height (BTT Eddy=5, Mellow Fly/Cartographer=10)
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1
        
        # Second pass - Fine adjustment
        _QUAD_GANTRY_LEVEL horizontal_move_z=2
        
        # Home Z after leveling
        STATUS_HOMING
        G28 Z
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=STATE_QGL
    STATUS_READY

#####################################################################
#   A better start_print macro for SV08
#####################################################################

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer, such as bed temp, extruder temp, chamber temp, and the size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
  STATUS_HOMING                                                 # Sets SB-LEDs to homing-mode

  {% if printer.toolhead.homed_axes != "xyz" %}
    G28                                                         # Full home (XYZ)
  {% else %}
    G28 Z                                                       # Home only Z if X and Y have been homed
  {% endif %}
                
  G90                                                           # Use absolute/relative coordinates

  M400                                                          # Wait for current moves to finish

  CLEAR_PAUSE

  # Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR                                                # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90C - if so, then trigger a heat soak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"                   # Displays info
    STATUS_HEATING                                              # Sets SB-LEDs to heating-mode
    M106 S255                                                   # Turns on the PT-fan
    # Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                               # Turns on the Nevermore
    G1 X{x_wait} Y{y_wait} Z15 F9000                            # Go to the center of the bed
    M190 S{target_bed}                                          # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"          # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for the chamber to reach the desired temp

  # If the bed temp is not over 90c, then handle soak based on material
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"                   # Displays info
    STATUS_HEATING                                              # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                            # Go to center of the bed
    M190 S{target_bed}                                          # Sets the target temp for the bed
    
    # Material-based soak times with variant handling
    {% set raw_material = params.MATERIAL|default("PLA")|string|upper %}
    
    # Extract base material type by handling variants
    {% set material = namespace(type="") %}
    {% if "PLA" in raw_material %}
        {% set material.type = "PLA" %}
    {% elif "PETG" in raw_material %}
        {% set material.type = "PETG" %}
    {% elif "TPU" in raw_material or "TPE" in raw_material %}
        {% set material.type = "TPU" %}
    {% elif "PVA" in raw_material %}
        {% set material.type = "PVA" %}
    {% elif "HIPS" in raw_material %}
        {% set material.type = "HIPS" %}
    {% else %}
        {% set material.type = raw_material %}
    {% endif %}

    # Define soak times
    {% set soak_time = {
        "PLA": 180000,    # 3 minutes - Standard PLA soak time
        "PETG": 240000,   # 4 minutes - PETG needs slightly longer to stabilize
        "TPU": 180000,    # 3 minutes - TPU/TPE materials
        "PVA": 180000,    # 3 minutes - Support material, similar to PLA
        "HIPS": 240000    # 4 minutes - When used as support/primary under 90C
    }[material.type]|default(300000) %}    # Default to 5 minutes if material not found
    
    SET_DISPLAY_TEXT MSG="Soak: {soak_time/60000|int}min ({raw_material})"
    G4 P{soak_time}
  {% endif %}

  #   # Comment out for Trident (Z_TILT_ADJUST)
  # {% set z_tilt_was_applied = printer['z_tilt'].applied %}    # Store initial Z-TILT state
  # {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
  #   STATUS_LEVELING                                            # Sets SB-LEDs to leveling-mode
  #   SET_DISPLAY_TEXT MSG="Z-tilt adjust"                       # Displays info
  #   Z_TILT_ADJUST                                              # Levels the buildplate via z_tilt_adjust
  #   # Only home Z if it hasn't been done by Z_TILT and isn't already homed
  #   {% if 'z' not in printer.toolhead.homed_axes %}
  #       STATUS_HOMING                                          # Sets SB-LEDs to homing-mode
  #       G28 Z                                                  # Home Z only if needed
  #   {% endif %}
  # {% endif %}

  # QGL Section with conditional G28 Z
  # {% set qgl_was_applied = printer.quad_gantry_level.applied %}  # Store initial QGL state
  
  # Comment out for Voron (QUAD_GANTRY_LEVEL)
  {% if not printer.quad_gantry_level.applied %}
    STATUS_LEVELING                                             # Sets SB-LEDs to leveling-mode
    SET_DISPLAY_TEXT MSG="QGL"                                  # Displays info
    QUAD_GANTRY_LEVEL                                           # Levels the gantry (includes G28 Z)
  {% else %}
    # Only home Z if it hasn't been done by QGL and isn't already homed
     {% if 'z' not in printer.toolhead.homed_axes %}
         STATUS_HOMING                                           # Sets SB-LEDs to homing-mode
         G28 Z                                                   # Home Z only if needed
     {% endif %}
  {% endif %}

  # Heating the nozzle to 150C. This helps with getting a correct Z-home
  STATUS_HEATING                                                # Sets SB-LEDs to heating-mode
  SET_DISPLAY_TEXT MSG="Hotend: 150C"                           # Displays info
  M109 S150                                                     # Heats the nozzle to 150C

  STATUS_CLEANING                                               # Sets SB-LEDs to cleaning-mode
  CLEAN_NOZZLE EXTRUDER={target_extruder}                       # See: https://github.com/ss1gohan13/SV08-Replacement-Macros/blob/main/macros/macro.cfg

  STATUS_COOLING                                                # Sets SB-LEDs to cooling-mode
  M109 S150                                                     # Heats the nozzle to 150C

  SET_DISPLAY_TEXT MSG="Tappy Tap"                              # Displays info
  PROBE_EDDY_NG_TAP                                             # See: https://hackmd.io/yEF4CEntSHiFTj230CdD0Q

  SMART_PARK                                                    # Parks the toolhead neat the beginning of the print

  # Uncomment for bed mesh (2 of 2)
  STATUS_MESHING                                                # Sets SB-LEDs to bed mesh-mode
  SET_DISPLAY_TEXT MSG="Bed mesh"                               # Displays info
  BED_MESH_CALIBRATE METHOD=RAPID_SCAN ADAPTIVE=1               # Starts bed mesh for eddy
  #BED_MESH_CALIBRATE ADAPTIVE=1                                # Starts bed mesh

  M400                                                          # Wait for current moves to finish

  SMART_PARK                                                    # KAMP smart park

  # Heats up the nozzle to target via data from the slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info
  STATUS_HEATING                                                # Sets SB-LEDs to heating-mode
  M107                                                          # Turns off part cooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  
  # Gets ready to print by doing a purge line and updating the SB-LEDs
  SET_DISPLAY_TEXT MSG="The purge..."                           # Displays info
  STATUS_CLEANING                                               # Sets SB-LEDs to cleaning-mode
  LINE_PURGE                                                    # KAMP line purge

  SET_DISPLAY_TEXT MSG="Printer goes brrr"                      # Displays info
  
  STATUS_PRINTING                                               # Sets SB-LEDs to printing-mode

[gcode_macro END_PRINT]
gcode:
  #Get Boundaries
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set min_x = printer.configfile.config["stepper_x"]["position_endstop"]|float %}

  #Check end position to determine safe directions to move
  {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
    {% else %}
      {% set x_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
    {% else %}
      {% set y_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
  {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

  #Commence END_PRINT
  STATUS_COOLING
  M400                                                           # wait for buffer to clear
  G92 E0                                                         # zero the extruder
  G1 E-4.0 F3600                                                 # retract
  G91                                                            # relative positioning
  G0 Z{z_safe} F3600                                             # move nozzle up
  M104 S0                                                        # turn off hotend
  M140 S0                                                        # turn off bed
  M106 S0                                                        # turn off fan
  M107                                                           # turn off part cooling fan
  G90                                                            # absolute positioning
  G1 X{min_x} Y{max_y} F2000                                     # move nozzle and present

  # Safe Z-drop if near maximum height (after parking)
  {% if printer.toolhead.position.z > (max_z - 20) %}
    G91                                                          # relative positioning
    G1 Z-10 F1200                                                # drop 10mm if near the top
    G90                                                          # back to absolute
  {% endif %}

#  SET_DISPLAY_TEXT MSG="Scrubbing air..."                       # Displays info
#  SET_PIN PIN=nevermore VALUE=0                                 # Turns off the nevermore
#  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=300
  SET_DISPLAY_TEXT MSG="Print finished!!"                        # Displays info
  STATUS_PART_READY
  PROBE_EDGY_NG_SET_TAP_OFFSET VALUE=0
  UPDATE_DELAYED_GCODE ID=set_ready_status DURATION=60
  UPDATE_DELAYED_GCODE ID=reset_printer_status DURATION=65
#  M84 # Disable motors  ##CURRENTLY DISABLED THIS TO ALLOW THE IDLE TIMEOUT TIMER DISABLE THE MOTORS - PLEASE MAKE SURE YOUR HAVE AN IDLE TIMEOUT TIMER SET - FLUIDD OR MAINSAIL HAVE THESE BY DEFAULT

[delayed_gcode reset_printer_status]
gcode:
    SDCARD_RESET_FILE

[delayed_gcode turn_off_nevermore]
gcode:
  SET_PIN PIN=nevermore VALUE=0                      # Turns off the nevermore

[delayed_gcode set_ready_status]
gcode:
  STATUS_READY

[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro mainled]
variable_state: 1  # Set initial state to 1 since light starts on
description: Toggles main LED on/off
gcode:
    {% if printer["gcode_macro mainled"].state %}
        SET_PIN PIN=main_led VALUE=0
        SET_GCODE_VARIABLE MACRO=mainled VARIABLE=state VALUE=0
    {% else %}
        SET_PIN PIN=main_led VALUE=1
        SET_GCODE_VARIABLE MACRO=mainled VARIABLE=state VALUE=1
    {% endif %}
# [gcode_macro mainled_on]
# gcode:
#     SET_PIN PIN=main_led VALUE=1

# [gcode_macro mainled_off]
# gcode:
#     SET_PIN PIN=main_led VALUE=0

[delayed_gcode turn_off_bed_heater]
gcode:
  M140 S0 ; turn off bed

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[gcode_macro M600]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}
  {% set default_e = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
    {% if 'bowden_len' in svv %}
      {% set default_e = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set e = params.E|default(default_e)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE_PARK X={x} Y={y} Z={z}
    M702 U{e}
  {% endif %}

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning temperature - use EXTRUDER param if available, otherwise default to 200
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(200))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Check if printer needs homing
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                                     # Full home if not fully homed
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
        {% endif %}
        
        # Only home Z if we actually performed a leveling operation
        STATUS_HOMING
        G28 Z                                  # Home Z again after leveling
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X324 Y357 Z10 F7800                     # Move to cleaning position with safe Z height
    
    STATUS_HEATING
    M117 Heating nozzle...
    {action_respond_info("Heating nozzle to %s°C" % (NOZZLE_TEMP))}
    M109 S{NOZZLE_TEMP}                        # Heat and wait
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                  # Fan at 50%
    
    STATUS_CLEANING
    M117 Cleaning nozzle
    
    # Combined cleaning pattern
    G1 X324 Y357 F7800                        # Move to start position
    G1 Z0.2 F300                              # Lower to cleaning height (0.2mm)
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}            # Configurable wipe cycles
        # Straight wipes (now moving along X-axis)
        G1 X352 Y357 F7800                    # Forward wipe (right) - adjusted from 340 to 352
        G1 X324 Y357 F7800                    # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800                    # Diagonal forward - adjusted from 360 to 362
        G1 Y359.5 X336 F7800                  # Middle point - adjusted from 358.5
        G1 Y357 X352 F7800                    # Diagonal back - adjusted from 340 to 352
        
        # Constant pressure cleaning
        G1 Y362 X324 F7800                    # Forward wipe - adjusted from 360 to 362
        G1 Y357 X332 F7800                    # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X324 F7800                        # Move away from cleaning area - adjusted from 365 to 363
    M400                                      # Wait for moves to complete
    M117 Clean Complete
    M107                                      # Turn off fan
    
    # Return to safe position
    G91                                       # Relative positioning
    G1 Z10 F300                               # Raise nozzle
    G90                                       # Absolute positioning
    G28 Z                                     # Home Z
    
    STATUS_READY
    # Only turn off heaters if we're not in a print
    {% if printer.idle_timeout.state == "Idle" %}
        TURN_OFF_HEATERS
        {action_respond_info("Cleaning complete - heaters turned off (idle state)")}
    {% else %}
        {action_respond_info("Cleaning complete - heaters maintained (printing state)")}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

    #M84                                      # Disable steppers

[gcode_macro UNSAFE_Z_MOVEMENT]
description: Move the toolhead in Z without homing. REQUIRES force_move CONFIG! Use positive or negative values.
gcode:
    {% set z_movement = params.Z|default(5)|float %}    # Default 5mm if not specified
    
    {% if not 'force_move' in printer %}
        { action_raise_error("This macro requires [force_move] to be enabled in printer.cfg") }
    {% else %}
        # Extra warning for downward movement
        {% if z_movement < 0 %}
            { action_respond_info("!!! WARNING: PERFORMING UNSAFE DOWNWARD MOVEMENT !!!") }
            { action_respond_info("!!! ENSURE ADEQUATE CLEARANCE BELOW NOZZLE !!!") }
        {% endif %}
        
        # General warning message
        { action_respond_info("WARNING: Performing unsafe tool movement without homing!") }
        { action_respond_info("Moving Z by %smm (%s)" % (z_movement, "DOWN" if z_movement < 0 else "UP")) }
        
        # Save current state
        SAVE_GCODE_STATE NAME=UNSAFE_MOVE
        
        # Perform unsafe move
        G90                                    # Absolute positioning
        SET_KINEMATIC_POSITION Z=0            # Force Z position to 0
        G0 Z{z_movement} F300                 # Move Z at slower 5mm/s for safety
        #M84                                   # Disable steppers - Commented out to allow multiple movements
        
        # Restore saved state
        RESTORE_GCODE_STATE NAME=UNSAFE_MOVE
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
description: Calibrates Z-offset with QGL (if needed), heated nozzle and bed
rename_existing: PROBE_CALIBRATE_BASE
gcode:
    {% set min_temp = 0 %}
    {% set max_temp = printer.configfile.settings.heater_bed.max_temp|int %}
    
    # Prompt for bed temperature
    RESPOND TYPE=command MSG='What bed temperature would you like? (0-{max_temp})'
    M117 Enter bed temperature
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
    
    {% set BED_TEMP = printer.axis_maximum|float %}
    
    SAVE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    
    # Inform user calibration starting
    {action_respond_info("Starting preparation for Z-offset calibration")}
    {action_respond_info("Heating hotend to 150C and bed to %d" % (BED_TEMP))}
    
    # Start heating process
    M104 S150                          # Set hotend to 150C
    M140 S{BED_TEMP}                   # Set bed temperature
    
    # Check if QGL needs to be performed
    {% if not printer.quad_gantry_level.applied %}
        # Check homing status and home if needed
        {% if "xyz" not in printer.toolhead.homed_axes %}
            STATUS_HOMING
            G28                             # Full home if not already homed
        {% elif 'z' not in printer.toolhead.homed_axes %}
            STATUS_HOMING
            G28 Z                          # Home Z if only Z is unhomed
        {% endif %}
        
        STATUS_LEVELING
        QUAD_GANTRY_LEVEL              # Your macro handles the two-pass system
        
        # Home Z after leveling
        STATUS_HOMING
        G28 Z
    {% endif %}
    
    # Wait for temperatures after QGL
    M190 S{BED_TEMP}                   # Wait for bed temp
    M109 S150                          # Wait for hotend temp
    
    # Begin calibration
    PROBE_CALIBRATE_BASE               # Start calibration
    TESTZ Z=-4                         # Move to initial Z position
    
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    STATUS_READY

#[gcode_macro M106]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#    {% if fan == 'fan3'%}
#            SET_FAN_SPEED FAN={fan} SPEED={speed}
#    {% else %}
#        SET_FAN_SPEED FAN={'fan0'} SPEED={speed}
#        SET_FAN_SPEED FAN={'fan1'} SPEED={speed}
#    {% endif %}

# [gcode_macro QUAD_GANTRY_LEVEL_MANUAL]
# gcode:
#     #STATUS_HOMING
#     {% if printer.quad_gantry_level.applied == False %}
#         {% if "xyz" not in printer.toolhead.homed_axes %}
#             G28 ; home if not already homed
#             {% else %}
#               G28 Z
#         {% endif %}
#         STATUS_LEVELING
#         QUAD_GANTRY_LEVEL
#         STATUS_HOMING       # Homes Z again after QGL
#         G28 Z
#     {% endif %}
#     #STATUS_READY


# [gcode_macro QUAD_GANTRY_LEVEL]
# rename_existing: _QUAD_GANTRY_LEVEL
# gcode:
#     SAVE_GCODE_STATE NAME=STATE_QGL
#     #BED_MESH_CLEAR
#     {% if not printer.quad_gantry_level.applied %}
#     # Note! Replace this 5 with whatever you want the coarse QGL to happen at.
#     # BTT Eddy should keep 5, Mellow Fly/Cartographer can use 10
#     _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1       
#     {% endif %}
#     _QUAD_GANTRY_LEVEL horizontal_move_z=2
#     # G28 Z
#     RESTORE_GCODE_STATE NAME=STATE_QGL

# [gcode_macro _CLEAN_NOZZLE] #This is part of the "A better start_print macro SV08 Edition: https://github.com/ss1gohan13/A-better-print_start-macro-SV08
# gcode:
#     {% if printer.toolhead.homed_axes != "xyz" %}
#        G28
#     {% endif %}
#     G90 
#     G1 X315 Y360 Z10 F9000
#     M117 Nozzle heating...
#     M109 S200
#     G91
#     G90
#     M106 S127
#     M117 Clean nozzle
#     G1 Z0.2 F300
#     G1 X352 F4500
#     {% for wipes in range(5) %}
#         G1 Y360 X324
#         G1 Y360 X345
#     {% endfor %}
#     G1 Z5
#     G1 Z0.2
#     {% for wipes in range(5) %}
#         G1 Y360 X324
#         G1 Y357 X326
#         G1 Y360 X326
#         G1 Y357 X328
#         G1 Y360 X330
#         G1 Y357 X332
#         G1 Y360 X334
#         G1 Y357 X336
#         G1 Y360 X338
#         G1 Y357 X340
#     {% endfor %}
#     M400
#     M117 Clean Finish
#     M107 
#     G91
#     G1 Z10 F300
#     G90
#     G28 Z

# [gcode_macro CLEAN_NOZZLE] #Manual nozzle scrub
# gcode:
#     {% if printer.quad_gantry_level.applied == False %}
#         {% if "xyz" not in printer.toolhead.homed_axes %}
#             STATUS_HOMING
#             G28 ; home if not already homed
#             {% else %}
#               STATUS_HOMING
#               G28 Z
#         {% endif %}
#         STATUS_LEVELING
#         QUAD_GANTRY_LEVEL
#         STATUS_HOMING       # Homes Z again after QGL
#         G28 Z
#     {% endif %}
#     G90 
#     G1 X348 Y348 Z10 F9000
#     #STATUS_HEATING
#     M117 Nozzle heating...
#     M109 S230
#     G91
#     G90
#     M106 S127
#     #STATUS_CLEANING
#     M117 Clean nozzle
#     G1 X315 Y360 F9000
#     G1 Z0.2 F300
#     G1 X352 F4500
#     {% for wipes in range(5) %}
#         G1 Y360 X324
#         G1 Y360 X345
#     {% endfor %}
#     G1 Z5
#     G1 Z0.2
#     {% for wipes in range(5) %}
#         G1 Y360 X324
#         G1 Y357 X326
#         G1 Y360 X326
#         G1 Y357 X328
#         G1 Y360 X330
#         G1 Y357 X332
#         G1 Y360 X334
#         G1 Y357 X336
#         G1 Y360 X338
#         G1 Y357 X340
#     {% endfor %}
#     M400
#     M117 Clean Finish
#     M107 
#     G91
#     G1 Z10 F300
#     G90
#     G28 Z
#     #STATUS_READY
#     TURN_OFF_HEATERS
#     M84

# [gcode_macro CLEAN_NOZZLE]
# gcode:
#     # Ensure printer is leveled
#     {% if printer.quad_gantry_level.applied == False %}
#         {% if "xyz" not in printer.toolhead.homed_axes %}
#             G28 # Home all axes if not homed
#         {% else %}
#             G28 Z # Home Z only
#         {% endif %}
#         STATUS_LEVELING
#         QUAD_GANTRY_LEVEL
#         STATUS_HOMING # Re-home Z after leveling
#         G28 Z
#     {% endif %}

#     # Define parameters
#     {% set clean_temp = params.TEMP|default(200)|int %} # Cleaning temperature (default: 200°C)
#     {% set wipes = params.WIPES|default(5)|int %} # Number of cleaning wipes (default: 5)
#     {% set x_clean = printer.toolhead.axis_maximum.x - 10 %} # Dynamic cleaning X position
#     {% set y_clean = printer.toolhead.axis_maximum.y - 10 %} # Dynamic cleaning Y position

#     # Move to cleaning position
#     G90
#     G1 X{x_clean} Y{y_clean} Z10 F9000

#     # Heat nozzle
#     STATUS_HEATING
#     M117 Heating nozzle to {clean_temp}°C...
#     M109 S{clean_temp}

#     # Start cleaning
#     STATUS_CLEANING
#     M117 Cleaning nozzle...
#     M106 S127 # Set fan to 50%

#     # Perform horizontal wipes
#     G1 Z0.2 F300 # Lower nozzle slightly
#     G1 X{x_clean + 37} F4500 # Move to starting point
#     {% for _ in range(wipes) %}
#         G1 Y{y_clean} X{x_clean} # Wipe to start
#         G1 Y{y_clean} X{x_clean + 30} # Wipe to end
#     {% endfor %}

#     G1 Z5 # Raise nozzle
#     G1 Z0.2 # Lower nozzle slightly again

#     # Perform detailed zigzag cleaning
#     {% for _ in range(wipes) %}
#         G1 Y{y_clean} X{x_clean}
#         G1 Y{y_clean - 3} X{x_clean + 2}
#         G1 Y{y_clean} X{x_clean + 2}
#         G1 Y{y_clean - 3} X{x_clean + 4}
#         G1 Y{y_clean} X{x_clean + 6}
#         G1 Y{y_clean - 3} X{x_clean + 8}
#         G1 Y{y_clean} X{x_clean + 10}
#         G1 Y{y_clean - 3} X{x_clean + 12}
#         G1 Y{y_clean} X{x_clean + 14}
#         G1 Y{y_clean - 3} X{x_clean + 16}
#     {% endfor %}

#     # Finish cleaning
#     M400 # Wait for buffer to clear
#     M117 Cleaning finished
#     M107 # Turn off fan
#     G91 # Relative positioning
#     G1 Z10 F300 # Raise nozzle
#     G90 # Absolute positioning
#     G28 Z # Re-home Z axis

#     # Post-cleaning operations
#     TURN_OFF_HEATERS # Turn off all heaters
#     M84 # Disable motors
#     STATUS_READY
    

#[gcode_macro LOAD_FILAMENT]
#variable_load_distance:  50
#variable_purge_distance:  25
#gcode:
#    {% set speed = params.SPEED|default(300) %}
#    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
#    SAVE_GCODE_STATE NAME=load_state
#    G91
#    G92 E0
#    G1 E{load_distance} F{max_velocity} # fast-load
#    G1 E{purge_distance} F{speed} # purge
#    RESTORE_GCODE_STATE NAME=load_state

#[gcode_macro UNLOAD_FILAMENT]
#variable_unload_distance:  50
#variable_purge_distance:  25
#gcode:
#    {% set speed = params.SPEED|default(300) %}
#    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
#    SAVE_GCODE_STATE NAME=unload_state
#    G91
#    G92 E0
#    G1 E{purge_distance} F{speed} # purge
#    G1 E-{unload_distance} F{max_velocity} # fast-unload
#    RESTORE_GCODE_STATE NAME=unload_state

#[gcode_macro M107]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% if fan == 'fan3'%}
#            SET_FAN_SPEED FAN={fan} SPEED=0
#    {% else %}
#        SET_FAN_SPEED FAN={'fan0'} SPEED=0
#        SET_FAN_SPEED FAN={'fan1'} SPEED=0
#    {% endif %}

#[gcode_macro LOAD_FILAMENT]
#gcode:
#    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
#    {% set current_target_temp  = printer.extruder.target|int %}

#    {% if printer.print_stats.state != "printing" %}
#        {% if printer.print_stats.state != "paused" %}
#            M104 S{extruder_temp}
#            M117 Nozzle heating...
#            {action_respond_info("Nozzle not hot enough!")}
#            {action_respond_info("Nozzle heating...")}
#            M109 S{extruder_temp}
#        {% else %}
#            {% if printer.extruder.target == 0 %}
#                M104 S{extruder_temp}
#                M117 Nozzle heating...
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{extruder_temp}
#            {% else %}
#                M104 S{printer.extruder.target}
#                M117 Nozzle heating...
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{printer.extruder.target}
#            {% endif %}
#        {% endif %}
#        M117 Extruding...
#        G91 
#        G1 E45 F300
#        G1 E30 F150
#        G90
#        M400
#        M117 Extrude Finish
#        M400
#        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
#            M104 S0
#        {% endif %}
#    {% else %}
#        {action_respond_info("Don't load filament during printing!!!")}
#    {% endif %}

    
#[gcode_macro UNLOAD_FILAMENT]
#gcode:
    #{% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    #{% set current_target_temp  = printer.extruder.target|int %}
#    {% set target_extruder = params.EXTRUDER|int %}

#    {% if printer.print_stats.state != "printing" %}
#        {% if printer.print_stats.state != "paused" %}
#            M104 S{extruder_temp}
#            M117 Nozzle heating...
#            {action_respond_info("Nozzle not hot enough!")}
#            {action_respond_info("Nozzle heating...")}
#            M109 S{extruder_temp}
#        {% else %}
#            {% if printer.extruder.target == 0 %}
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{extruder_temp}
#            {% else %}
#                M104 S{printer.extruder.target}
#                M117 Nozzle heating...
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{printer.extruder.target}
#            {% endif %}
#        {% endif %}
#        M117 Retracting...
#        G91
#        G1 E+25 F300
#        G1 E-10 F1500
#        G1 E-20 F600
#        M400
#        G4 P3000
#        G1 E-50 F300 
#        G90
#        M400
#        M117 Retract Finish
#        M400
#        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
#            M104 S0
#        {% endif %}
#    {% else %}
#        {action_respond_info("Don't unload filament during printing!!!")}
#    {% endif %}

#[gcode_macro G29]
# gcode:
#     {% if printer.quad_gantry_level.applied == False %}
#         {% if "xyz" not in printer.toolhead.homed_axes %}
#             G28 ; home if not already homed
#             {% else %}
#               G28 Z
#         {% endif %}
#         STATUS_LEVELING
#         QUAD_GANTRY_LEVEL
#         STATUS_HOMING       # Homes Z again after QGL
#         G28 Z
#     {% endif %}
#   BED_MESH_CALIBRATE ADAPTIVE=1 Method=rapid_scan
#   G28 Z