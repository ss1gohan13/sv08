[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 chamber"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}

[gcode_macro G29]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
  QUAD_GANTRY_LEVEL
  G28 Z
  BED_MESH_CALIBRATE #Method=rapid_scan
  G28 Z

[gcode_macro QUAD_GANTRY_LEVEL_MANUAL]
gcode:
    STATUS_HOMING
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    G28 Z
    STATUS_READY

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
    STATUS_HOMING         # Sets SB-leds to homing-mode
    
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                      # Full home (XYZ)
    {% endif %}
                
    G90

    SMART_PARK

    M400

    CLEAR_PAUSE

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  STATUS_HOMING
  G28 Z                           # Homes Z again after QGL

  SMART_PARK

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 200C"          # Displays info
  M109 S200                                    # Heats the nozzle to 200C

  STATUS_CLEANING

  CLEAN_NOZZLE

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode

  #BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=RAPID_SCAN               # Starts bed mesh
  BED_MESH_CALIBRATE METHOD=rapid_scan ADAPTIVE=1 

  M400

  STATUS_READY

  SMART_PARK

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  
  STATUS_PRINTING
  
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  
  LINE_PURGE

[gcode_macro END_PRINT]
gcode:
  #Get Boundaries
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set min_x = printer.configfile.config["stepper_x"]["position_endstop"]|float %}

  #Check end position to determine safe directions to move
  {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
    {% else %}
      {% set x_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
    {% else %}
      {% set y_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
  {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

  #Commence END_PRINT
  M400 ; wait for buffer to clear
  G92 E0 ; zero the extruder
  G1 E-4.0 F3600 ; retract
  G91 ; relative positioning
  G0 Z{z_safe} F3600 ; move nozzle up
  M104 S0 ; turn off hotend
  M140 S0 ; turn off bed
  M106 S0 ; turn off fan
  M107 ; turn off part cooling fan
  G90 ; absolute positioning
  G1 X{min_x} Y{max_y} F2000 ; move nozzle and present
  SET_DISPLAY_TEXT MSG="Scrubbing air..."          # Displays info
  M84
  G4 P300000                                         # Waits 5 min for nevremore to cycle air
  SET_PIN PIN=nevermore VALUE=0                      # Turns off the nevermore
  SET_DISPLAY_TEXT MSG="Print finished!!"            # Displays info

[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro mainled_on]
gcode:
    SET_PIN PIN=main_led VALUE=1

[gcode_macro mainled_off]
gcode:
    SET_PIN PIN=main_led VALUE=0

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[gcode_macro M600]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}
  {% set default_e = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
    {% if 'bowden_len' in svv %}
      {% set default_e = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set e = params.E|default(default_e)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE_PARK X={x} Y={y} Z={z}
    M702 U{e}
  {% endif %}

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 75.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 600     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "STATUS_BUSY"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "STATUS_READY"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "M117 Cancel Print"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

#[gcode_macro M106]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#    {% if fan == 'fan3'%}
#            SET_FAN_SPEED FAN={fan} SPEED={speed}
#    {% else %}
#        SET_FAN_SPEED FAN={'fan0'} SPEED={speed}
#        SET_FAN_SPEED FAN={'fan1'} SPEED={speed}
#    {% endif %}
    

[gcode_macro CLEAN_NOZZLE] 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    G90 
    G1 X315 Y360 Z10 F9000
    M117 Nozzle heating...
    M109 S200
    G91
    G90
    M106 S127
    M117 Clean nozzle
    G1 Z0.2 F300
    G1 X352 F4500
    {% for wipes in range(5) %}
        G1 Y360 X324
        G1 Y360 X345
    {% endfor %}
    G1 Z5
    G1 Z0.2
    {% for wipes in range(5) %}
        G1 Y360 X324
        G1 Y357 X326
        G1 Y360 X326
        G1 Y357 X328
        G1 Y360 X330
        G1 Y357 X332
        G1 Y360 X334
        G1 Y357 X336
        G1 Y360 X338
        G1 Y357 X340
    {% endfor %}
    M400
    M117 Clean Finish
    M107 
    G91
    G1 Z10 F300
    G90
    G28 Z

[gcode_macro CLEAN_NOZZLE_MANUAL] 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    G28 Z
    G90 
    G1 X348 Y348 Z10 F9000
    STATUS_HEATING
    M117 Nozzle heating...
    M109 S230
    G91
    G90
    M106 S127
    STATUS_CLEANING
    M117 Clean nozzle
    G1 X315 Y360 F9000
    G1 Z0.2 F300
    G1 X352 F4500
    {% for wipes in range(5) %}
        G1 Y360 X324
        G1 Y360 X345
    {% endfor %}
    G1 Z5
    G1 Z0.2
    {% for wipes in range(5) %}
        G1 Y360 X324
        G1 Y357 X326
        G1 Y360 X326
        G1 Y357 X328
        G1 Y360 X330
        G1 Y357 X332
        G1 Y360 X334
        G1 Y357 X336
        G1 Y360 X338
        G1 Y357 X340
    {% endfor %}
    M400
    M117 Clean Finish
    M107 
    G91
    G1 Z10 F300
    G90
    G28 Z
    STATUS_READY
    TURN_OFF_HEATERS
    M84


#[gcode_macro M107]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% if fan == 'fan3'%}
#            SET_FAN_SPEED FAN={fan} SPEED=0
#    {% else %}
#        SET_FAN_SPEED FAN={'fan0'} SPEED=0
#        SET_FAN_SPEED FAN={'fan1'} SPEED=0
#    {% endif %}

#[gcode_macro LOAD_FILAMENT]
#gcode:
#    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
#    {% set current_target_temp  = printer.extruder.target|int %}

#    {% if printer.print_stats.state != "printing" %}
#        {% if printer.print_stats.state != "paused" %}
#            M104 S{extruder_temp}
#            M117 Nozzle heating...
#            {action_respond_info("Nozzle not hot enough!")}
#            {action_respond_info("Nozzle heating...")}
#            M109 S{extruder_temp}
#        {% else %}
#            {% if printer.extruder.target == 0 %}
#                M104 S{extruder_temp}
#                M117 Nozzle heating...
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{extruder_temp}
#            {% else %}
#                M104 S{printer.extruder.target}
#                M117 Nozzle heating...
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{printer.extruder.target}
#            {% endif %}
#        {% endif %}
#        M117 Extruding...
#        G91 
#        G1 E45 F300
#        G1 E30 F150
#        G90
#        M400
#        M117 Extrude Finish
#        M400
#        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
#            M104 S0
#        {% endif %}
#    {% else %}
#        {action_respond_info("Don't load filament during printing!!!")}
#    {% endif %}

    
#[gcode_macro UNLOAD_FILAMENT]
#gcode:
    #{% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    #{% set current_target_temp  = printer.extruder.target|int %}
#    {% set target_extruder = params.EXTRUDER|int %}

#    {% if printer.print_stats.state != "printing" %}
#        {% if printer.print_stats.state != "paused" %}
#            M104 S{extruder_temp}
#            M117 Nozzle heating...
#            {action_respond_info("Nozzle not hot enough!")}
#            {action_respond_info("Nozzle heating...")}
#            M109 S{extruder_temp}
#        {% else %}
#            {% if printer.extruder.target == 0 %}
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{extruder_temp}
#            {% else %}
#                M104 S{printer.extruder.target}
#                M117 Nozzle heating...
#                {action_respond_info("Nozzle not hot enough!")}
#                {action_respond_info("Nozzle heating...")}
#                M109 S{printer.extruder.target}
#            {% endif %}
#        {% endif %}
#        M117 Retracting...
#        G91
#        G1 E+25 F300
#        G1 E-10 F1500
#        G1 E-20 F600
#        M400
#        G4 P3000
#        G1 E-50 F300 
#        G90
#        M400
#        M117 Retract Finish
#        M400
#        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
#            M104 S0
#        {% endif %}
#    {% else %}
#        {action_respond_info("Don't unload filament during printing!!!")}
#    {% endif %}